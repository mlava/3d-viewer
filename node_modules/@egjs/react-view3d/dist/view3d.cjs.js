/*
Copyright (c) 2020-present NAVER Corp.
name: @egjs/react-view3d
license: MIT
author: NAVER Corp.
repository: https://github.com/naver/egjs-view3d/tree/master/packages/react-view3d
version: 2.3.1
*/
'use strict';

var React = require('react');
var VanillaView3D = require('@egjs/view3d');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

var view3DSetterNames = Object.getOwnPropertyNames(VanillaView3D.prototype).filter(function (name) {
  var descriptor = Object.getOwnPropertyDescriptor(VanillaView3D.prototype, name);
  if (name.startsWith("_")) return false;
  if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.value) return false;
  return !!descriptor.set;
});

var View3D =
/*#__PURE__*/
function (_super) {
  __extends(View3D, _super);

  function View3D(props) {
    var _this = _super.call(this, props) || this;

    VanillaView3D.withMethods(_this, "_vanillaView3D");
    return _this;
  }

  var __proto = View3D.prototype;
  Object.defineProperty(__proto, "view3D", {
    get: function () {
      return this._vanillaView3D;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(__proto, "element", {
    get: function () {
      return this._containerEl;
    },
    enumerable: false,
    configurable: true
  });

  __proto.componentDidMount = function () {
    this._vanillaView3D = new VanillaView3D(this._containerEl, this.props);

    this._bindEvents();
  };

  __proto.componentWillUnmount = function () {
    this._vanillaView3D.destroy();
  };

  __proto.componentDidUpdate = function (prevProps) {
    var _this = this;

    var view3D = this._vanillaView3D;
    view3DSetterNames.forEach(function (name) {
      var oldProp = prevProps[name];
      var newProp = _this.props[name];

      if (newProp !== oldProp) {
        view3D[name] = newProp;
      }
    });
  };

  __proto.render = function () {
    var _this = this;

    var _a = this.props,
        tag = _a.tag,
        _b = _a.className,
        className = _b === void 0 ? "" : _b,
        _c = _a.canvasClass,
        canvasClass = _c === void 0 ? "" : _c,
        restProps = __rest(_a, ["tag", "className", "canvasClass"]);

    var Container = tag;
    var wrapperClassName = "".concat(VanillaView3D.DEFAULT_CLASS.WRAPPER, " ").concat(className).trim();
    var canvasClassName = "".concat(VanillaView3D.DEFAULT_CLASS.CANVAS, " ").concat(canvasClass).trim();
    var attributes = {};

    for (var name in restProps) {
      if (!name.startsWith("on") && !(name in VanillaView3D.prototype)) {
        attributes[name] = restProps[name];
      }
    }

    return React.createElement(Container, __assign({}, attributes, {
      className: wrapperClassName,
      ref: function (e) {
        e && (_this._containerEl = e);
      }
    }), React.createElement("canvas", {
      className: canvasClassName
    }), this.props.children);
  };

  __proto._bindEvents = function () {
    var _this = this;

    var view3D = this._vanillaView3D;
    Object.keys(VanillaView3D.EVENTS).forEach(function (eventKey) {
      var eventName = VanillaView3D.EVENTS[eventKey];
      var propName = "on".concat(eventName.charAt(0).toUpperCase() + eventName.slice(1));
      view3D.on(eventName, function (e) {
        e.target = _this;
        var evtHandler = _this.props[propName];

        if (evtHandler) {
          evtHandler(e);
        }
      });
    });
  };

  View3D.defaultProps = {
    tag: "div"
  };
  return View3D;
}(React.PureComponent);

/*
 * Copyright (c) 2020 NAVER Corp.
 * egjs projects are licensed under the MIT license
 */

module.exports = View3D;
//# sourceMappingURL=view3d.cjs.js.map
